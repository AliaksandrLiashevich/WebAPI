// <auto-generated />
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(DALContext))]
    partial class DALContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Interfaces.Entities.DataAccessCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cln_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnName("cln_code");

                    b.Property<string>("Name")
                        .HasColumnName("cln_name");

                    b.HasKey("Id");

                    b.ToTable("tbl_categories");

                    b.HasData(
                        new { Id = 1, Code = "BICYC", Name = "Bicycling" },
                        new { Id = 2, Code = "MARAR", Name = "Martial arts" },
                        new { Id = 3, Code = "FITSS", Name = "Fitness" }
                    );
                });

            modelBuilder.Entity("DAL.Interfaces.Entities.DataAccessProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cln_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnName("cln_category_id");

                    b.Property<string>("Name")
                        .HasColumnName("cln_name");

                    b.Property<decimal>("Price")
                        .HasColumnName("cln_price");

                    b.Property<int>("Quantity")
                        .HasColumnName("cln_quantity");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("tbl_products");

                    b.HasData(
                        new { Id = 1, CategoryId = 1, Name = "Brakes", Price = 50m, Quantity = 10 },
                        new { Id = 2, CategoryId = 1, Name = "Drivetrain", Price = 82.3m, Quantity = 4 },
                        new { Id = 3, CategoryId = 1, Name = "Fork", Price = 100.25m, Quantity = 36 },
                        new { Id = 4, CategoryId = 2, Name = "Kimono", Price = 15.6m, Quantity = 200 },
                        new { Id = 5, CategoryId = 2, Name = "Boxing gloves", Price = 5.5m, Quantity = 512 },
                        new { Id = 6, CategoryId = 2, Name = "Boxing helmet", Price = 20m, Quantity = 123 },
                        new { Id = 7, CategoryId = 3, Name = "Fitness mat", Price = 12.32m, Quantity = 56 },
                        new { Id = 8, CategoryId = 3, Name = "Hoop", Price = 12.5m, Quantity = 312 },
                        new { Id = 9, CategoryId = 3, Name = "Fitball", Price = 6.3m, Quantity = 33 }
                    );
                });

            modelBuilder.Entity("DAL.Interfaces.Entities.DataAccessProduct", b =>
                {
                    b.HasOne("DAL.Interfaces.Entities.DataAccessCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
